
import http from 'http';
import { v4 as uuidv4 } from 'uuid';
//import {uuid} from 

interface User {
    id: string;
    username: string;
    age: number;
    hobbies: string[];
}

let users: User[] = [];

const server = http.createServer((req, res) => {
    const urlParts = req.url?.split('/');
    const userId = urlParts?.[3];

    switch (req.method) {
        case 'GET':
            if (urlParts?.[2] === 'users') {
                if (userId) {
                    // GET api/users/{userId}
                    const user = users.find(u => u.id === userId);
                    if (!user) {
                        res.writeHead(404, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ message: 'User not found' }));
                    } else {
                        res.writeHead(200, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify(user));
                    }
                } else {
                    // GET api/users
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(users));
                }
            }
            break;

        case 'POST':
            if (urlParts?.[2] === 'users') {
                let body = '';

                req.on('data', chunk => {
                    body += chunk.toString();
                });

                req.on('end', () => {
                    const { username, age, hobbies } = JSON.parse(body);
                    if (!username || typeof username !== 'string' || !age || typeof age !== 'number' || !Array.isArray(hobbies)) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ message: 'Required fields are missing or invalid' }));
                    } else {
                        const newUser: User = {
                            id: uuidv4(),
                            username,
                            age,
                            hobbies
                        };
                        users.push(newUser);
                        res.writeHead(201, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify(newUser));
                    }
                });
            }
            break;

        case 'PUT':
            if (urlParts?.[2] === 'users' && userId) {
                const userIndex = users.findIndex(u => u.id === userId);
                if (userIndex === -1) {
                    res.writeHead(404, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ message: 'User not found' }));
                    return;
                }

                let body = '';
                req.on('data', chunk => {
                    body += chunk.toString();
                });

                req.on('end', () => {
                    const { username, age, hobbies } = JSON.parse(body);
                    const updatedUser: User = {
                        ...users[userIndex],
                        username: username !== undefined ? username : users[userIndex].username,
                        age: age !== undefined ? age : users[userIndex].age,
                        hobbies: hobbies !== undefined ? hobbies : users[userIndex].hobbies,
                    };
                    users[userIndex] = updatedUser;
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(updatedUser));
                });
            } else {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Invalid userId format' }));
            }
            break;

        case 'DELETE':
            if (urlParts?.[2] === 'users' && userId) {
                const userIndex = users.findIndex(u => u.id === userId);
                if (userIndex === -1) {
                    res.writeHead(404, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ message: 'User not found' }));
                } else {
                    users.splice(userIndex, 1);
                    res.writeHead(204);
                    res.end();
                }
            } else {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Invalid userId format' }));
            }
            break;

        default:
            res.writeHead(405, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ message: 'Method not allowed' }));
            break;
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

//server.on("")